{"ast":null,"code":"import { ticketToRideData } from \"../res/ticket-to-ride-data\";\nimport { initialGameState, initalPlayers } from \"./status\";\nimport socket from \"../socket/socket\";\nexport const playerCountReducer = (state = 2, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  if (type === \"MODIFY_PLAYER_COUNT\") {\n    return state + payload;\n  }\n\n  return state;\n};\nexport const playerNameReducer = (state = \"\", action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  if (type === 'MODIFY_PLAYER_NAME') {\n    return state = payload;\n  }\n\n  return state;\n};\nexport const gameDataReducer = (state = ticketToRideData, action) => {\n  return state;\n};\nexport const playerReducer = (state = initalPlayers, action) => {\n  return state;\n};\nexport const gameStateReducer = (state = initialGameState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  if (type === 'UPDATE_GAME_STATE') {\n    const newState = payload;\n    return newState;\n  }\n\n  if (type === \"START_GAME\") {\n    state.state = 'START_GAME';\n    state.players = payload.players; // set current player\n\n    state.currentPlayer = payload.players[0];\n    state.code = Math.random().toString(36).substring(7); // generate room code\n\n    console.log('state code', state.code);\n    socket.emit(\"sync-state\", state.code, state, true, ack => {});\n  } else if (type === 'JOIN_ROOM') {\n    const {\n      players,\n      maxPlayers,\n      code,\n      name\n    } = payload;\n    let newState = state;\n    newState.players = players;\n    newState.maxPlayers = maxPlayers;\n    newState.code = code;\n    newState.currentPlayer = players[0];\n    newState.status = 'WAITING_FOR_PLAYERS';\n    newState.currentPlayer.status = 'BEGIN'; //newState.players?.push({ name, id: v4(), isOwner: false });\n\n    socket.emit(\"sync-state\", newState.code, newState, true, ack => {});\n    return newState;\n  } else if (type === \"INIT_GAME\") {\n    var _state$wagonCards;\n\n    state.state = 'INIT_GAME'; // if more than 3 locomotives - redraw deck\n\n    do {\n      state.wagonCards = generateWagonCards();\n      state.onFieldWagonCards = [];\n\n      if (state.wagonCards) {\n        for (let i = 0; i < 5; i++) {\n          var _state$onFieldWagonCa;\n\n          // train cards on table (4)\n          (_state$onFieldWagonCa = state.onFieldWagonCards) === null || _state$onFieldWagonCa === void 0 ? void 0 : _state$onFieldWagonCa.push(state.wagonCards[i]);\n        }\n      }\n    } while (countWagons(state.onFieldWagonCards) >= 3);\n\n    state.wagonCards = (_state$wagonCards = state.wagonCards) === null || _state$wagonCards === void 0 ? void 0 : _state$wagonCards.slice(5, state.wagonCards.length); // generate destination cards\n\n    state.shortDestinationCards = generateShortDestinationCards();\n    state.longDestinationCards = generateLongDestinationCards();\n    state.players = payload.players; // set current player\n\n    console.log('STATE PLAYERS:', state.players);\n    state.currentPlayer = payload.players[0]; // add wagon cards to players (4)\n\n    state.players.forEach(player => {\n      var _state$wagonCards2, _state$shortDestinati, _state$longDestinatio;\n\n      player.wagonCards = [];\n\n      if (state.wagonCards) {\n        for (let i = 0; i < 4; i++) {\n          player.wagonCards.push(JSON.parse(JSON.stringify(state.wagonCards[i])));\n        }\n      }\n\n      state.wagonCards = (_state$wagonCards2 = state.wagonCards) === null || _state$wagonCards2 === void 0 ? void 0 : _state$wagonCards2.slice(4, state.wagonCards.length);\n      player.shortDestCards = [];\n\n      if (state.shortDestinationCards) {\n        // 4 short destination card for each player\n        for (let i = 0; i < 5; i++) {\n          player.shortDestCards.push(state.shortDestinationCards[i]);\n        }\n      }\n\n      state.shortDestinationCards = (_state$shortDestinati = state.shortDestinationCards) === null || _state$shortDestinati === void 0 ? void 0 : _state$shortDestinati.slice(5, state.shortDestinationCards.length);\n      player.longDestCards = [];\n\n      if (state.longDestinationCards) {\n        // 1 long destination card for each player\n        player.longDestCards.push(state.longDestinationCards[0]);\n      }\n\n      state.longDestinationCards = (_state$longDestinatio = state.longDestinationCards) === null || _state$longDestinatio === void 0 ? void 0 : _state$longDestinatio.slice(1, state.longDestinationCards.length);\n      player.wagons = 45; // initial wagons/player : 45\n\n      player.points = 0;\n    });\n    state.players[0].isSelected = true;\n    state.status = 'IN_GAME';\n    socket.emit(\"sync-state\", state.code, state, true, ack => {});\n    return state;\n  } else if (type === 'DRAW_FROM_DECK') {\n    var _state$currentPlayer, _state$currentPlayer5;\n\n    /* \n        DRAW CARD FROM DECK\n    */\n    console.log('player status', state.currentPlayer);\n\n    if (((_state$currentPlayer = state.currentPlayer) === null || _state$currentPlayer === void 0 ? void 0 : _state$currentPlayer.status) === 'BEGIN') {\n      var _state$currentPlayer2, _state$currentPlayer3;\n\n      (_state$currentPlayer2 = state.currentPlayer) === null || _state$currentPlayer2 === void 0 ? void 0 : (_state$currentPlayer3 = _state$currentPlayer2.wagonCards) === null || _state$currentPlayer3 === void 0 ? void 0 : _state$currentPlayer3.push(state.wagonCards[0]);\n      state.players = state.players.map(player => {\n        var _state$currentPlayer4;\n\n        if (player.index === ((_state$currentPlayer4 = state.currentPlayer) === null || _state$currentPlayer4 === void 0 ? void 0 : _state$currentPlayer4.index) && state.wagonCards) {\n          var _player$wagonCards;\n\n          console.log(`${player.name} ${state.wagonCards[0].type} vasútikocsi kártyát húzott a pakliból`);\n          player.moves.push(`${player.name} ${state.wagonCards[0].type} vasútikocsi kártyát húzott a pakliból`);\n          (_player$wagonCards = player.wagonCards) === null || _player$wagonCards === void 0 ? void 0 : _player$wagonCards.push(state.wagonCards[0]);\n          state.wagonCards = state.wagonCards.slice(1, state.wagonCards.length);\n        }\n\n        return player;\n      });\n      state.currentPlayer.status = 'DRAW';\n    } else if (((_state$currentPlayer5 = state.currentPlayer) === null || _state$currentPlayer5 === void 0 ? void 0 : _state$currentPlayer5.status) === 'DRAW') {\n      var _state$currentPlayer6, _state$currentPlayer7, _state$currentPlayer9;\n\n      console.log('DRAW');\n      (_state$currentPlayer6 = state.currentPlayer) === null || _state$currentPlayer6 === void 0 ? void 0 : (_state$currentPlayer7 = _state$currentPlayer6.wagonCards) === null || _state$currentPlayer7 === void 0 ? void 0 : _state$currentPlayer7.push(state.wagonCards[0]);\n      state.players = state.players.map((player, i) => {\n        var _state$currentPlayer8;\n\n        if (i === ((_state$currentPlayer8 = state.currentPlayer) === null || _state$currentPlayer8 === void 0 ? void 0 : _state$currentPlayer8.index) && state.wagonCards) {\n          var _player$wagonCards2;\n\n          (_player$wagonCards2 = player.wagonCards) === null || _player$wagonCards2 === void 0 ? void 0 : _player$wagonCards2.push(state.wagonCards[0]);\n          console.log(`${player.name} ${state.wagonCards[0].type} vasútikocsi kártyát húzott a pakliból`);\n          player.moves.push(`${player.name} ${state.wagonCards[0].type} vasútikocsi kártyát húzott a pakliból`);\n          state.wagonCards = state.wagonCards.slice(1, state.wagonCards.length);\n        }\n\n        return player;\n      });\n      let index = ((_state$currentPlayer9 = state.currentPlayer) === null || _state$currentPlayer9 === void 0 ? void 0 : _state$currentPlayer9.index) == 0 ? 1 : 0;\n      state.currentPlayer.status = 'END';\n      state.players[state.currentPlayer.index].isSelected = false;\n      state.players[index].isSelected = true;\n      state.players[index].round++;\n      state.currentPlayer = Object.assign({}, state.players[index]);\n      state.currentPlayer.status = 'BEGIN';\n      console.log('Next round, player:', state.currentPlayer.name);\n    }\n\n    socket.emit(\"sync-state\", state.code, state, true, ack => {});\n    return state;\n  } else if (type === 'DRAW_CARD') {\n    var _state$currentPlayer10, _state$currentPlayer16;\n\n    /* \n        VASÚTI KÁRTYA HÚZÁSA AZ ASZTALRÓL\n    */\n    const {\n      number: idx\n    } = payload; // kártya száma\n\n    if (((_state$currentPlayer10 = state.currentPlayer) === null || _state$currentPlayer10 === void 0 ? void 0 : _state$currentPlayer10.status) === 'BEGIN') {\n      // ELSŐ KÖRÖS HÚZÁS  \n      // ha van a pakliban kártya\n      if (state.onFieldWagonCards && state.wagonCards) {\n        var _state$currentPlayer11, _state$currentPlayer12;\n\n        (_state$currentPlayer11 = state.currentPlayer) === null || _state$currentPlayer11 === void 0 ? void 0 : (_state$currentPlayer12 = _state$currentPlayer11.wagonCards) === null || _state$currentPlayer12 === void 0 ? void 0 : _state$currentPlayer12.push(state.onFieldWagonCards[idx]); // kicseréljük a húzott kártyát\n\n        const cards = Object.assign([], state.onFieldWagonCards);\n        cards[idx] = state.wagonCards[0];\n        state.onFieldWagonCards = Object.assign([], cards);\n        state.wagonCards = state.wagonCards.slice(1, state.wagonCards.length);\n        state.players.forEach((player, i) => {\n          var _state$currentPlayer13;\n\n          if (i === ((_state$currentPlayer13 = state.currentPlayer) === null || _state$currentPlayer13 === void 0 ? void 0 : _state$currentPlayer13.index)) {\n            var _state$currentPlayer14;\n\n            player.wagonCards = (_state$currentPlayer14 = state.currentPlayer) === null || _state$currentPlayer14 === void 0 ? void 0 : _state$currentPlayer14.wagonCards;\n            console.log(`${player.name} ${state.onFieldWagonCards[idx].type} vasútikocsi kártyát húzott az asztalról`);\n            player.moves.push(`${player.name} ${state.onFieldWagonCards[idx].type} vasútikocsi kártyát húzott az asztalról`);\n          }\n        });\n      }\n\n      if (state.currentPlayer.wagonCards && state.currentPlayer.wagonCards[state.currentPlayer.wagonCards.length - 1].type === \"locomotive\" // mozdony húzása után nem húzhat több kártyát\n      ) {\n          var _state$currentPlayer15;\n\n          // ha nem léphet többet - a másik játékos jön\n          const next = ((_state$currentPlayer15 = state.currentPlayer) === null || _state$currentPlayer15 === void 0 ? void 0 : _state$currentPlayer15.index) == 0 ? 1 : 0;\n          state.currentPlayer.status = 'END';\n          state.players[state.currentPlayer.index].isSelected = false;\n          state.players[next].isSelected = true;\n          state.players[next].round++;\n          state.currentPlayer = Object.assign({}, state.players[next]);\n          state.currentPlayer.status = 'BEGIN';\n          console.log('Next round, player:', state.currentPlayer);\n        } else {\n        // második körös húzás\n        state.currentPlayer.status = 'DRAW';\n      }\n    } else if (((_state$currentPlayer16 = state.currentPlayer) === null || _state$currentPlayer16 === void 0 ? void 0 : _state$currentPlayer16.status) === 'DRAW') {\n      var _state$currentPlayer21;\n\n      console.log('Player status: DRAW'); // második körös húzás\n\n      if (state.onFieldWagonCards && state.wagonCards) {\n        var _state$currentPlayer17, _state$currentPlayer18;\n\n        console.log('REFRESH PLAYER CARDS');\n        (_state$currentPlayer17 = state.currentPlayer) === null || _state$currentPlayer17 === void 0 ? void 0 : (_state$currentPlayer18 = _state$currentPlayer17.wagonCards) === null || _state$currentPlayer18 === void 0 ? void 0 : _state$currentPlayer18.push(state.onFieldWagonCards[idx]);\n        state.onFieldWagonCards[idx] = state.wagonCards[0];\n        state.wagonCards = state.wagonCards.slice(1, state.wagonCards.length);\n        state.players.forEach((player, i) => {\n          var _state$currentPlayer19;\n\n          if (i === ((_state$currentPlayer19 = state.currentPlayer) === null || _state$currentPlayer19 === void 0 ? void 0 : _state$currentPlayer19.index)) {\n            var _state$currentPlayer20;\n\n            player.wagonCards = (_state$currentPlayer20 = state.currentPlayer) === null || _state$currentPlayer20 === void 0 ? void 0 : _state$currentPlayer20.wagonCards;\n            console.log(`${player.name} ${state.onFieldWagonCards[idx].type} vasútikocsi kártyát húzott az asztalról`);\n            player.moves.push(`${player.name} ${state.onFieldWagonCards[idx].type} vasútikocsi kártyát húzott az asztalról`);\n          }\n        });\n      }\n\n      let next = ((_state$currentPlayer21 = state.currentPlayer) === null || _state$currentPlayer21 === void 0 ? void 0 : _state$currentPlayer21.index) == 0 ? 1 : 0;\n      state.currentPlayer.status = 'END';\n      state.players[state.currentPlayer.index].isSelected = false;\n      state.players[next].isSelected = true;\n      state.players[next].round++;\n      state.currentPlayer = Object.assign({}, state.players[next]);\n      state.currentPlayer.status = 'BEGIN';\n      console.log('Next round, player:', state.currentPlayer);\n    }\n\n    state = JSON.parse(JSON.stringify(state));\n    return state;\n  }\n\n  return state;\n};\n\nfunction generateWagonCards() {\n  let deck = [];\n\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 12; j++) {\n      if (i === 0) deck.push({\n        type: \"purple\"\n      });else if (i === 1) deck.push({\n        type: \"white\"\n      });else if (i === 2) deck.push({\n        type: \"blue\"\n      });else if (i === 3) deck.push({\n        type: \"yellow\"\n      });else if (i === 4) deck.push({\n        type: \"orange\"\n      });else if (i === 5) deck.push({\n        type: \"black\"\n      });else if (i === 6) deck.push({\n        type: \"red\"\n      });else if (i === 7) deck.push({\n        type: \"green\"\n      });\n    }\n  }\n\n  for (let i = 0; i < 14; i++) {\n    deck.push({\n      type: \"locomotive\"\n    });\n  }\n\n  return deck.map(a => ({\n    sort: Math.random(),\n    value: a\n  })).sort((a, b) => a.sort - b.sort).map(a => a.value);\n}\n\nfunction generateShortDestinationCards() {\n  let deck = [];\n\n  for (const [key, value] of Object.entries(ticketToRideData.destinations)) {\n    deck.push(value);\n  }\n\n  return deck.map(a => ({\n    sort: Math.random(),\n    value: a\n  })).sort((a, b) => a.sort - b.sort).map(a => a.value);\n}\n\nfunction generateLongDestinationCards() {\n  let deck = [];\n\n  for (const [key, value] of Object.entries(ticketToRideData.longDestinations)) {\n    deck.push(value);\n  }\n\n  return deck.map(a => ({\n    sort: Math.random(),\n    value: a\n  })).sort((a, b) => a.sort - b.sort).map(a => a.value);\n}\n\nfunction countWagons(deck) {\n  return deck.filter(card => card.type === \"locomotive\").length;\n}","map":{"version":3,"sources":["/Users/dori/Egyetem/elte-studies/kliensoldali_webprog/ticket_to_ride_k2vz0t/src/redux/reducer.js"],"names":["ticketToRideData","initialGameState","initalPlayers","socket","playerCountReducer","state","action","type","payload","playerNameReducer","gameDataReducer","playerReducer","gameStateReducer","newState","players","currentPlayer","code","Math","random","toString","substring","console","log","emit","ack","maxPlayers","name","status","wagonCards","generateWagonCards","onFieldWagonCards","i","push","countWagons","slice","length","shortDestinationCards","generateShortDestinationCards","longDestinationCards","generateLongDestinationCards","forEach","player","JSON","parse","stringify","shortDestCards","longDestCards","wagons","points","isSelected","map","index","moves","round","Object","assign","number","idx","cards","next","deck","j","a","sort","value","b","key","entries","destinations","longDestinations","filter","card"],"mappings":"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","sourcesContent":["import { ticketToRideData } from \"../res/ticket-to-ride-data\";\n\nimport { initialGameState, initalPlayers } from \"./status\";\n\nimport socket from \"../socket/socket\";\n\nexport const playerCountReducer = (state = 2, action) => {\n    const { type, payload } = action;\n\n    if (type === \"MODIFY_PLAYER_COUNT\") {\n        return state + (payload);\n    }\n\n    return state;\n};\n\nexport const playerNameReducer = (state = \"\", action) => {\n    const { type, payload } = action;\n\n    if (type === 'MODIFY_PLAYER_NAME') {\n        return (state = payload);\n    }\n\n    return state;\n};\n\nexport const gameDataReducer = (state = ticketToRideData, action) => { \n    return state;\n};\n\nexport const playerReducer = (state = initalPlayers, action) => { \n    return state;\n};\n\nexport const gameStateReducer = (\n    state = initialGameState,\n    action\n) => {\n    const { type, payload } = action;\n\n    if (type === 'UPDATE_GAME_STATE') {\n        const newState = payload;\n        return newState;\n    }\n\n    if (type === \"START_GAME\") {\n\n        state.state = 'START_GAME';\n        state.players = payload.players;\n        \n        // set current player\n        state.currentPlayer = payload.players[0];\n        state.code = Math.random().toString(36).substring(7); // generate room code\n\n        console.log('state code', state.code);\n        socket.emit(\n            \"sync-state\",\n            state.code,\n            state,\n            true,\n            (ack) => {}\n        );\n\n    } else if (type === 'JOIN_ROOM') {\n        const { players, maxPlayers, code, name } = payload;\n        let newState = state;\n        newState.players = players;\n        newState.maxPlayers = maxPlayers;\n        newState.code = code;\n        newState.currentPlayer = players[0];\n        newState.status = 'WAITING_FOR_PLAYERS';\n        newState.currentPlayer.status = 'BEGIN';\n        //newState.players?.push({ name, id: v4(), isOwner: false });\n\n        socket.emit(\n            \"sync-state\",\n            newState.code,\n            newState,\n            true,\n            (ack) => {}\n        );\n        return newState;\n\n    } else if (type === \"INIT_GAME\") {\n        state.state = 'INIT_GAME';\n\n        // if more than 3 locomotives - redraw deck\n        do {\n            state.wagonCards = generateWagonCards();\n            state.onFieldWagonCards = [];\n            if (state.wagonCards) {\n                for (let i = 0; i < 5; i++) {\n                    // train cards on table (4)\n                    state.onFieldWagonCards?.push(state.wagonCards[i]);\n                }\n            }\n        } while (countWagons(state.onFieldWagonCards) >= 3);\n\n        state.wagonCards = state.wagonCards?.slice(5, state.wagonCards.length);\n\n        // generate destination cards\n        state.shortDestinationCards = generateShortDestinationCards();\n        state.longDestinationCards = generateLongDestinationCards();\n\n        state.players = payload.players\n        // set current player\n        console.log('STATE PLAYERS:', state.players)\n        state.currentPlayer = payload.players[0];\n\n        // add wagon cards to players (4)\n        state.players.forEach((player) => {\n            player.wagonCards = [];\n            if (state.wagonCards) {\n                for (let i = 0; i < 4; i++) {\n                    player.wagonCards.push(JSON.parse(JSON.stringify(state.wagonCards[i])));\n                }    \n            } \n            state.wagonCards = state.wagonCards?.slice(4, state.wagonCards.length);\n            player.shortDestCards = [];\n            if (state.shortDestinationCards) { // 4 short destination card for each player\n                for (let i = 0; i < 5; i++) {\n                    player.shortDestCards.push(state.shortDestinationCards[i]);\n                }\n            }\n            state.shortDestinationCards = state.shortDestinationCards?.slice(5, state.shortDestinationCards.length);\n            player.longDestCards = [];\n            if (state.longDestinationCards) { // 1 long destination card for each player\n                player.longDestCards.push(state.longDestinationCards[0]);\n            }\n\n            state.longDestinationCards = state.longDestinationCards?.slice(1, state.longDestinationCards.length);\n            player.wagons = 45; // initial wagons/player : 45\n            player.points = 0;\n        });\n\n        state.players[0].isSelected = true;\n\n        state.status = 'IN_GAME';\n\n        socket.emit(\"sync-state\", state.code, state, true, (ack) => {});\n\n        return state;\n\n    }  else if (type === 'DRAW_FROM_DECK') {\n        /* \n            DRAW CARD FROM DECK\n        */\n        console.log('player status', state.currentPlayer)\n        if (state.currentPlayer?.status === 'BEGIN') {\n\n            state.currentPlayer?.wagonCards?.push(state.wagonCards[0]);\n\n            state.players = state.players.map((player) => {\n                if (player.index === state.currentPlayer?.index && state.wagonCards) {\n                    console.log(`${player.name} ${state.wagonCards[0].type} vasútikocsi kártyát húzott a pakliból`)\n                    player.moves.push(`${player.name} ${state.wagonCards[0].type} vasútikocsi kártyát húzott a pakliból`);\n                    player.wagonCards?.push(state.wagonCards[0]);\n                    state.wagonCards = state.wagonCards.slice(1, state.wagonCards.length);\n                }\n                return player;\n            });\n\n            state.currentPlayer.status = 'DRAW';\n\n        } else if (state.currentPlayer?.status === 'DRAW') {\n            console.log('DRAW')\n\n            state.currentPlayer?.wagonCards?.push(state.wagonCards[0]);\n\n            state.players = state.players.map((player, i) => {\n                if (i === state.currentPlayer?.index && state.wagonCards) {\n                    player.wagonCards?.push(state.wagonCards[0]);\n                    console.log(`${player.name} ${state.wagonCards[0].type} vasútikocsi kártyát húzott a pakliból`)\n                    player.moves.push(`${player.name} ${state.wagonCards[0].type} vasútikocsi kártyát húzott a pakliból`);\n                    state.wagonCards = state.wagonCards.slice(1, state.wagonCards.length);\n                }\n                return player;\n            });\n\n            let index = state.currentPlayer?.index == 0 ? 1 : 0;\n\n            state.currentPlayer.status = 'END';\n            \n            state.players[state.currentPlayer.index].isSelected = false;\n            state.players[index].isSelected = true;\n            state.players[index].round++;\n\n            state.currentPlayer = Object.assign({}, state.players[index]);\n            state.currentPlayer.status = 'BEGIN';\n\n            console.log('Next round, player:', state.currentPlayer.name);\n        }\n\n        socket.emit(\"sync-state\", state.code, state, true, (ack) => {});\n\n        return state;\n\n    } else if (type === 'DRAW_CARD') {\n        /* \n            VASÚTI KÁRTYA HÚZÁSA AZ ASZTALRÓL\n        */\n        const { number: idx } = payload; // kártya száma\n        if (state.currentPlayer?.status === 'BEGIN') { // ELSŐ KÖRÖS HÚZÁS  \n\n            // ha van a pakliban kártya\n            if (state.onFieldWagonCards && state.wagonCards) {\n\n                state.currentPlayer?.wagonCards?.push(state.onFieldWagonCards[idx]);\n\n                // kicseréljük a húzott kártyát\n                const cards = Object.assign([], state.onFieldWagonCards);\n                cards[idx] = state.wagonCards[0];\n                state.onFieldWagonCards = Object.assign([], cards);\n\n                state.wagonCards = state.wagonCards.slice(1, state.wagonCards.length);\n\n                state.players.forEach((player, i) => {\n                    if (i === state.currentPlayer?.index) {\n                        player.wagonCards = state.currentPlayer?.wagonCards;\n                        console.log(`${player.name} ${state.onFieldWagonCards[idx].type} vasútikocsi kártyát húzott az asztalról`)\n                        player.moves.push(`${player.name} ${state.onFieldWagonCards[idx].type} vasútikocsi kártyát húzott az asztalról`);\n                    }\n                });\n            }\n\n            if (\n                state.currentPlayer.wagonCards &&\n                state.currentPlayer.wagonCards[state.currentPlayer.wagonCards.length - 1].type === \"locomotive\" // mozdony húzása után nem húzhat több kártyát\n            ) {\n                // ha nem léphet többet - a másik játékos jön\n                const next = state.currentPlayer?.index == 0 ? 1 : 0;\n\n                state.currentPlayer.status = 'END';\n\n                state.players[state.currentPlayer.index].isSelected = false;\n                state.players[next].isSelected = true;\n                state.players[next].round++;\n\n                state.currentPlayer = Object.assign({}, state.players[next]);\n                state.currentPlayer.status = 'BEGIN';\n\n                console.log('Next round, player:', state.currentPlayer);\n            } else {\n                // második körös húzás\n                state.currentPlayer.status = 'DRAW';\n            }\n\n        } else if (state.currentPlayer?.status === 'DRAW') {\n            console.log('Player status: DRAW'); // második körös húzás\n\n            if (state.onFieldWagonCards && state.wagonCards) {\n\n                console.log('REFRESH PLAYER CARDS')\n                state.currentPlayer?.wagonCards?.push(state.onFieldWagonCards[idx]);\n\n                state.onFieldWagonCards[idx] = state.wagonCards[0];\n                state.wagonCards = state.wagonCards.slice(1, state.wagonCards.length);\n                \n                state.players.forEach((player, i) => {\n                    if (i === state.currentPlayer?.index) {\n                        player.wagonCards = state.currentPlayer?.wagonCards;\n                        console.log(`${player.name} ${state.onFieldWagonCards[idx].type} vasútikocsi kártyát húzott az asztalról`)\n                        player.moves.push(`${player.name} ${state.onFieldWagonCards[idx].type} vasútikocsi kártyát húzott az asztalról`);\n                    }\n                });\n            }\n\n            let next = state.currentPlayer?.index == 0 ? 1 : 0;\n\n            state.currentPlayer.status = 'END';\n        \n            state.players[state.currentPlayer.index].isSelected = false;\n            state.players[next].isSelected = true;\n            state.players[next].round++;\n\n            state.currentPlayer = Object.assign({}, state.players[next]);\n            state.currentPlayer.status = 'BEGIN';\n\n            console.log('Next round, player:', state.currentPlayer);\n            \n        }\n        state = JSON.parse(JSON.stringify(state));\n        return state;\n    }    \n\n    return state;\n};\n\nfunction generateWagonCards() {\n    let deck = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 12; j++) {\n            if (i === 0) deck.push({ type: \"purple\"});\n            else if (i === 1) deck.push({ type: \"white\" });\n            else if (i === 2) deck.push({ type: \"blue\" });\n            else if (i === 3) deck.push({ type: \"yellow\" });\n            else if (i === 4) deck.push({ type: \"orange\" });\n            else if (i === 5) deck.push({ type: \"black\" });\n            else if (i === 6) deck.push({ type: \"red\" });\n            else if (i === 7) deck.push({ type: \"green\" });\n        }\n    }\n    for (let i = 0; i < 14; i++) {\n        deck.push({ type: \"locomotive\" });\n    }\n    return deck\n        .map((a) => ({ sort: Math.random(), value: a }))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => a.value);\n}\n\nfunction generateShortDestinationCards() {\n    let deck = [];\n\n    for (const [key, value] of Object.entries(ticketToRideData.destinations)) {\n      deck.push(value);\n    }\n    return deck\n        .map((a) => ({ sort: Math.random(), value: a }))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => a.value);\n}\n\nfunction generateLongDestinationCards() {\n    let deck = [];\n\n    for (const [key, value] of Object.entries(ticketToRideData.longDestinations)) {\n      deck.push(value);\n    }\n\n    return deck\n      .map((a) => ({ sort: Math.random(), value: a }))\n      .sort((a, b) => a.sort - b.sort)\n      .map((a) => a.value);\n}\n\nfunction countWagons(deck) {\n    return deck.filter((card) => card.type === \"locomotive\").length;\n}"]},"metadata":{},"sourceType":"module"}